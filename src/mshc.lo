include "./lib/std.lo";
include "./lib/io.lo";

export fn _start() {
    init_stack!(20 * 1024);
    // 
    let nread_ref = stack_alloc!<u32>();
    let contents_ref_ref = stack_alloc!<*&u8>();
    fread(STDIN, nread_ref, contents_ref_ref) catch err {
        wasi::proc_exit(err);
    };
    let nread = *nread_ref;
    let contents_ref = *contents_ref_ref;
    // 
    let i = 0;
    loop {
        if i == nread {
            break;
        };
        // 
        let char = *array_at!<u8>(contents_ref, i);
        if char == '\n' {
            i += 1;
            continue;
        };
        if char == ';' {
            loop {
                if i >= nread {
                    break;
                };
                if *array_at!<u8>(contents_ref, i) == '\n' {
                    break;
                };
                i += 1;
            };
            continue;
        };
        if char == '>' {
            loop {
                i += 1;
                if i >= nread || *array_at!<u8>(contents_ref, i) == '\n' {
                    break;
                };
                if *array_at!<u8>(contents_ref, i) != ' ' {
                    panic_syntax_error(i);
                };
                // 
                let byte = 0 as u8;
                i += 1;
                if i >= nread {
                    panic_syntax_error(i);
                };
                let byte_hi = *array_at!<u8>(contents_ref, i);
                if byte_hi >= '0' && byte_hi <= '9' {
                    byte = (byte_hi - '0') * 16 as u8;
                } else if byte_hi >= 'A' && byte_hi <= 'F' {
                    byte = ((byte_hi - 'A') + 10 as u8) * 16 as u8;
                } else {
                    panic_syntax_error(i);
                };
                // 
                i += 1;
                if i >= nread {
                    panic_syntax_error(i);
                };
                let byte_lo = *array_at!<u8>(contents_ref, i);
                if byte_lo >= '0' && byte_lo <= '9' {
                    byte += byte_lo - '0';
                } else if byte_lo >= 'A' && byte_lo <= 'F' {
                    byte += (byte_lo - 'A') + 10 as u8;
                } else {
                    panic_syntax_error(i);
                };
                // 
                let byte_ref = stack_alloc!<u8>();
                *byte_ref = byte as u8;
                let _ = fputs(STDOUT, .str {
                    data: byte_ref as *&u8,
                    size: 1,
                });
            };
            continue;
        };
        // 
        panic_syntax_error(i);
    };
};

fn panic_syntax_error(offset: u32): void {
    fputs(STDERR, "syntax error: ");
    fprint_u32(STDERR, offset);
    fputs(STDERR, "\n");
    // 
    wasi::proc_exit(1);
};
